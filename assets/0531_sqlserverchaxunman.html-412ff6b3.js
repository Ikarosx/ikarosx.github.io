import{_ as s,p as n,q as a,Y as e}from"./framework-f2b64c38.js";const t={},o=e(`<h1 id="sqlserver查询慢" tabindex="-1"><a class="header-anchor" href="#sqlserver查询慢" aria-hidden="true">#</a> SqlServer查询慢</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>项目中用到了mybatis连接SqlServer，但遇到了一些查询的问题</p><h2 id="问题一-一样的sql-换一个日期执行计划不同" tabindex="-1"><a class="header-anchor" href="#问题一-一样的sql-换一个日期执行计划不同" aria-hidden="true">#</a> 问题一 一样的sql，换一个日期执行计划不同</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 一样的sql，djsj不同，第一条比第二条快很多</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span>
	<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> 
<span class="token keyword">FROM</span>
	e_ld2022 a <span class="token keyword">WITH</span> <span class="token punctuation">(</span> nolock <span class="token punctuation">)</span>
	<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> m_user b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>MID <span class="token operator">=</span> a<span class="token punctuation">.</span>dbbh 
<span class="token keyword">WHERE</span>
	a<span class="token punctuation">.</span>djsj <span class="token operator">=</span> <span class="token string">&#39;2022-05-18 00:00:00&#39;</span> 
	<span class="token operator">AND</span> a<span class="token punctuation">.</span>TQBH <span class="token operator">LIKE</span> <span class="token string">&#39;01%&#39;</span> 
	<span class="token operator">AND</span> a<span class="token punctuation">.</span>XMBH <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>


<span class="token keyword">SELECT</span> <span class="token function">COUNT</span>
	<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> 
<span class="token keyword">FROM</span>
	e_ld2022 a <span class="token keyword">WITH</span> <span class="token punctuation">(</span> nolock <span class="token punctuation">)</span>
	<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> m_user b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>MID <span class="token operator">=</span> a<span class="token punctuation">.</span>dbbh 
<span class="token keyword">WHERE</span>
	a<span class="token punctuation">.</span>djsj <span class="token operator">=</span> <span class="token string">&#39;2022-05-19 00:00:00&#39;</span> 
	<span class="token operator">AND</span> a<span class="token punctuation">.</span>TQBH <span class="token operator">LIKE</span> <span class="token string">&#39;01%&#39;</span> 
	<span class="token operator">AND</span> a<span class="token punctuation">.</span>XMBH <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h3><p>通过MSSM分析执行计划，发现两条查询执行计划不一致，查询慢的预估行数为1，走了LOOP，循环次数过多导致变慢<br> 故怀疑是没有更新统计信息，导致优化器优化失败</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 更新统计信息</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">STATISTICS</span> databse<span class="token punctuation">.</span><span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行更新统计信息后重新查询，正常。</p><h2 id="问题二-和-导致查询效率不同" tabindex="-1"><a class="header-anchor" href="#问题二-和-导致查询效率不同" aria-hidden="true">#</a> 问题二 #{}和\${}导致查询效率不同</h2><p>mybatis中使用到了如下语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>CBX <span class="token keyword">from</span> e_ld\${<span class="token keyword">year</span>} a <span class="token keyword">inner</span> <span class="token keyword">join</span> E_XM x <span class="token keyword">on</span> x<span class="token punctuation">.</span>XMBH <span class="token operator">=</span> a<span class="token punctuation">.</span>XMBH
<span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;dbbh != null and dbbh !=&#39;&#39;&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">AND</span> dbbh <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span><span class="token comment">#{dbbh},&#39;%&#39;)</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;tqbh != null and tqbh !=&#39;&#39;&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">AND</span> TQBH <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span><span class="token comment">#{tqbh},&#39;%&#39;)</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试，只要条件增加了DBBH和TQBH，就是LIKE语句，查询就巨慢<br> 但一样的SQL拎出来放到MSSM上执行，就很快</p><h3 id="解决-1" tabindex="-1"><a class="header-anchor" href="#解决-1" aria-hidden="true">#</a> 解决</h3><p>经过偶然测试，发现如果使用<code>AND TQBH LIKE &#39;\${tqbh}%&#39;</code>，就很快<br> 说明问题出现在\${}与#{}的区别上<br> 以往的认知上，只知道#{}就相当于PreparedStatement，能够防注入<br> \${}可能出现注入风险<br> 但不知道为啥这个会影响到查询性能<br> 跟了一下源码，发现跟sendStringParametersAsUnicode和数据库字段类型(VARCHAR、NVARCHAR)有关系<br> 总结来说就是</p><table><thead><tr><th>sendStringParametersAsUnicode\\字段类型</th><th>VARCHAR</th><th>NVARCHAR</th></tr></thead><tbody><tr><td>true</td><td>×</td><td>√</td></tr><tr><td>false</td><td>√</td><td>×</td></tr></tbody></table><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">SendStringParametersAsUnicode文档</p><p>SendStringParametersAsUnicode={true | false}. Determines whether string parameters are sent to the SQL Server database in Unicode or in the default character encoding of the database. True means that string parameters are sent to SQL Server in Unicode. False means that they are sent in the default encoding, which can improve performance because the server does not need to convert Unicode characters to the default encoding. You should, however, use default encoding only if the parameter string data that you specify is consistent with the default encoding of the database. The default is true.</p></div><p>如果SendStringParametersAsUnicode=true，会将String参数用Unicode的编码方式发送个服务器,即<code>JDBCType=NVARCHAR</code><br> 如果SendStringParametersAsUnicode=false，会将String参数用默认的方式发送给服务器，即<code>JDBCType=VARCHAR</code><br> 我们系统里<code>SendStringParametersAsUnicode=false</code>，所以指定的<code>JdbcType=VARCHAR</code><br> 但是数据库字段是<strong>NVARCHAR</strong>，和我们指定的不一致，所以会发生转换性能损耗，导致时间查询慢<br> 基于这个思路，我测试了一下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>CBX <span class="token keyword">from</span> e_ld\${<span class="token keyword">year</span>} a <span class="token keyword">inner</span> <span class="token keyword">join</span> E_XM x <span class="token keyword">on</span> x<span class="token punctuation">.</span>XMBH <span class="token operator">=</span> a<span class="token punctuation">.</span>XMBH
<span class="token operator">&lt;</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;dbbh != null and dbbh !=&#39;&#39;&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">AND</span> dbbh <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span><span class="token comment">#{dbbh, jdbcType=NVARCHAR},&#39;%&#39;)</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;tqbh != null and tqbh !=&#39;&#39;&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">AND</span> TQBH <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span><span class="token comment">#{tqbh, jdbcType=NVARCHAR},&#39;%&#39;)</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">where</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在mybatis xml中手动指定参数的jdbcType和数据库保持一致，和结论一样，可以正常执行，不会出现查询慢的情况。</p>`,21),p=[o];function r(l,c){return n(),a("div",null,p)}const d=s(t,[["render",r],["__file","0531_sqlserverchaxunman.html.vue"]]);export{d as default};
