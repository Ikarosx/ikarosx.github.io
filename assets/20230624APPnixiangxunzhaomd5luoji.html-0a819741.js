import{_ as s,p as a,q as e,R as p,Y as n}from"./framework-f2b64c38.js";const t={},o=n(`<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h1><p>目前在练习爬虫的时候发现了某app接口换了手机号后sign值就变了<br> 看结构很像是md5，但是没发现试了几个组合没发现<br> 最后尝试一下app逆向找到源码分析<br> 这是第一次app逆向，从结果来看还是比较满意的<br> 虽然确实走了很多弯路</p><h1 id="逆向过程" tabindex="-1"><a class="header-anchor" href="#逆向过程" aria-hidden="true">#</a> 逆向过程</h1><h2 id="已知前提" tabindex="-1"><a class="header-anchor" href="#已知前提" aria-hidden="true">#</a> 已知前提</h2><p>之前通过抓包已经拿到了参数和api地址<strong>xxxxx/prefix/login</strong><br> 假设参数是</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;phone: &quot;</span><span class="token number">13411165555</span>&quot;<span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;55555&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;platform&quot;</span><span class="token operator">:</span> <span class="token string">&quot;android&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sign&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4e3eb01d5104c3af67ed4d7171ca04ec&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逆向apk" tabindex="-1"><a class="header-anchor" href="#逆向apk" aria-hidden="true">#</a> 逆向apk</h2><p>因为我们需要看源码，所以先把apk下载下来<br> 利用dex2j工具解析apk拿到jar文件<br> 利用jadx工具/jd-gui查看jar源码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拿到apk的xxxxxx-dex2jar.jar</span>
d2j-dex2jar.bat .<span class="token punctuation">\\</span>xxxxxx.apk 
<span class="token comment"># 将jar包拖入jadx中查看源码  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现是没有源码的踪迹，而是有一个stub和qihoo的字样<br> 推测是360加固<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242041200.png"></p><h3 id="脱壳" tabindex="-1"><a class="header-anchor" href="#脱壳" aria-hidden="true">#</a> 脱壳</h3><p>脱壳工具使用在MAGISK + LSPosed上装的DITOR模块<br> 在LSPosed上启用DITOR模块<br> 勾中要脱壳的app<br> 打开DITOR选择通用模式即可<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242044039.jpg"> 选择通用模式后会弹出让你选择app<br> 打开app后，左上角有一个活动项<br> 点击后展开选择一键脱壳<br> 脱壳完成底下会显示文件路径，dex文件会放在里面<br> 注意截图<br> 知道文件路径后用adb shell连接到手机<br> 然后cp 到/sdcard/Download上再出去用pull拉取到电脑上<br> 这里要这么麻烦是因为默认放的路径我直接pull的话提示我permission denied<br> 所以移动到一个有权限的目录</p><h3 id="查看代码" tabindex="-1"><a class="header-anchor" href="#查看代码" aria-hidden="true">#</a> 查看代码</h3><p>脱壳后的文件夹里会放有n个dex文件<br> 从jadx中打开<br> 可能会遇到打开提示checksum不一致<br> 在jadx的文件-&gt;首选项里面关闭校验<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242049577.png"><br> 随便搜索一个查看是否有结果<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242050721.png"><br> 发现已经能够查看源码了<br> 但是都是经过混淆的<br> 所以只能找关键词了</p><h3 id="查找关键代码思路" tabindex="-1"><a class="header-anchor" href="#查找关键代码思路" aria-hidden="true">#</a> 查找关键代码思路</h3><p>首先通过api搜索<br> 很幸运有所收获，看到了源码疑似调用的地址</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242053712.png"><p>在之前抓包的时候已经发现了密码就是md5<br> 而且sign也是md5<br> 所以对这几个方法打开看一下<br> 正常逻辑就是在某个地方对sign进行了填充<br> 打开mo13393a这个方法进行跟踪<br> 期间通过搜索方法名找到了实现类</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242055754.png"><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242056204.png"><p>并且很快就发现了sign的踪迹<br> 可以看到put sign的值是通过m13373u算出来的，而且传入值就是map，那么正常逻辑就是会根据map去算出sign</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242056137.png"><p>观察具体算出来的代码<br> 可以大体了解到第一步是先把map转成sortmap，即顺序的<br> 这个很容易想到微信支付的签名就是按key的顺序=&amp;这种来计算<br> 观察其中的关键代码也确实是这样<br> 但是这种我之前试过了，发现md5还是不对<br> 最后我在代码中看到了关键的一句</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242059636.png">`,24),i=n(`<p>InterfaceC14538b.f45124a.m13402d()<br> 经过查看，可以发现几个关键地方</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242101633.png"><p>包含实例对象，调用的方法，取的值<br> 现在很明确知道我们要的值是在某个时候被set进去了<br> 那么我们可以在DITOR中调用这个实例的这个方法<br> 当然可以hook（还不会）</p><h3 id="调用get方法" tabindex="-1"><a class="header-anchor" href="#调用get方法" aria-hidden="true">#</a> 调用get方法</h3><p>这里有一点需要声明<br> 在jadx中开启了反混淆<br> 所以看到的名称都比较长<br> 但是在源代码中都是abcd<br> 所以我这里是在jadx中右键复制frida片段看到原本的名字以便于在手机上DITOR中操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 类</span>
let InterfaceC14538b <span class="token operator">=</span> Java<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">&quot;q4.b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 实际上的get方法</span>
<span class="token comment"># 可以看到是调用的q4.b的内部类a的方法d = m13402d </span>
let C14539a <span class="token operator">=</span> Java<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">&quot;q4.b$a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
C14539a<span class="token punctuation">[</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>implementation <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>\`C14539a<span class="token punctuation">.</span>m13402d <span class="token keyword">is</span> called\`<span class="token punctuation">)</span><span class="token punctuation">;</span>
    let result <span class="token operator">=</span> this<span class="token punctuation">[</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>\`C14539a<span class="token punctuation">.</span>m13402d result<span class="token operator">=</span>$<span class="token punctuation">{</span>result<span class="token punctuation">}</span>\`<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在手机上打开对话框里面的代码分析<br> 搜索q4.b$a<br> 选择函数调用<br> 找到q4.b$a的d方法<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242107179.jpg"> 先点击&quot;选择&quot;选择实例对象<br> 然后开始调用<br> 就能够在底部拿到这个值<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202306242108581.png"></p><p>然后在代码中生成sign的部分写成动态的<br> 即根据参数排序生成a=b&amp;c=d这种形式<br> 并在最后加上固定值<br> 对字符串进行md5<br> 然后一对比发现确实就是这个<br> 任务完成</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>运气成分占多<br> 第一次逆向发现挺多东西都水到渠成<br> 根据api就搜索到了<br> 另外能够确认这个值是固定的是因为不管过了多久sign值都一样<br> 说明没有时间等的因素影响<br> 以及我抓包使用ios<br> 逆向是用android<br> 两种平台都用的同样的算法也是运气好</p>`,10);function c(r,u){return a(),e("div",null,[o,p(" 他在生成完字符串以后 还往后面加了一串东西 那么我猜就应该是这串东西导致的md5不对 "),i])}const d=s(t,[["render",c],["__file","20230624APPnixiangxunzhaomd5luoji.html.vue"]]);export{d as default};
