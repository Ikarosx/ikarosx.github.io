import{_ as e,p as n,q as s,Y as a}from"./framework-f2b64c38.js";const i={},t=a(`<h1 id="等保" tabindex="-1"><a class="header-anchor" href="#等保" aria-hidden="true">#</a> 等保</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>最近公司有个客户需要对接等保<br> 然后将项目给安全公司扫了一遍<br> 给我们发来了一份文档(AppScan扫描出来的)<br> 从此走上一周的等保之路</p><h2 id="漏洞" tabindex="-1"><a class="header-anchor" href="#漏洞" aria-hidden="true">#</a> 漏洞</h2><p>发给我们的漏洞如下</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora202208051641995.png"><h3 id="sql注入-返回格式" tabindex="-1"><a class="header-anchor" href="#sql注入-返回格式" aria-hidden="true">#</a> SQL注入/返回格式</h3><p>文档里有几类可以归为是返回格式的问题<br> 比如<strong>sql注入</strong>、<strong>非法参数</strong><br> 我们系统有2个分页参数是在mybatis里是不用#{}的，所以有注入风险<br> 为此我们写了一个过滤器防止一些参数<br> 问题有2个</p><ol><li>过滤器参数不完整，有些无法过滤</li><li>已经过滤了，但由于返回格式暴露了异常，安全报告上仍然显示（非法参数也是，虽然无法执行，但会暴露内部异常）</li></ol><p>第一个问题通过完善过滤器内容<br> 第二个需要在java后端里进行全局异常处理，即@ControllerAdvice详情见</p><p>通过全局异常处理可以解决如下</p><ol><li>JSON 中反映的未清理用户输入</li><li>整数溢出</li><li>应用程序错误</li></ol><p>完善过滤器解决SQL注入相关</p><h3 id="危险文件遍历" tabindex="-1"><a class="header-anchor" href="#危险文件遍历" aria-hidden="true">#</a> 危险文件遍历</h3><p>扫描器会遍历你的接口，加上一些常见文件以及后缀，比如.log,.zip判断可不可以获取到一些文件<br> 在我们的SpringBoot项目中，有一些写法是<code>@PathVariable</code><br> 导致了当接收类型是String时会导致这个漏洞出现<br> 他觉得响应是200，而且返回格式是<code>application/json</code>，所以是漏洞<br> 主要是<code>发现压缩目录</code></p><blockquote><p>解决方法:<br> 写个过滤器禁止掉这些特定后缀的，返回404<br> 也可以在nginx里配置也可以在SpringBoot项目配置</p></blockquote><h3 id="弱密码套件" tabindex="-1"><a class="header-anchor" href="#弱密码套件" aria-hidden="true">#</a> 弱密码套件</h3><p>在我们使用nginx的情况下，需要配置nginx使用的TLS版本和密码套件<br> 需要根据实际检测报告反馈修改配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># https用</span>
ssl_protocols TLSv1.2<span class="token punctuation">;</span>
<span class="token comment"># Enable modern TLS cipher suites</span>
ssl_ciphers <span class="token string">&#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求头相关" tabindex="-1"><a class="header-anchor" href="#请求头相关" aria-hidden="true">#</a> 请求头相关</h3><p>包含如下请求头需要处理</p><ul><li>Strict-Transport-Security: HSTS，告诉浏览器这个网站在什么情况下应该使用https</li><li>X-Content-Type-Options：contentType需要符合一定规则，不然会被阻止</li><li>X-Xss-Protection： 防止XSS攻击</li><li>Referrer-Policy：决定什么时候要发送<code>Referer</code> 这个请求头</li><li>Content-Security-Policy: CSP，决定能不能加载某个资源，配置最麻烦</li></ul><h4 id="strict-transport-security" tabindex="-1"><a class="header-anchor" href="#strict-transport-security" aria-hidden="true">#</a> Strict-Transport-Security</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 多少s内浏览器访问该网站应该使用https</span>
add_header Strict-Transport-Security <span class="token string">&quot;max-age=63072000;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="x-content-type-options" tabindex="-1"><a class="header-anchor" href="#x-content-type-options" aria-hidden="true">#</a> X-Content-Type-Options</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># X-Content-Type-Options HTTP 消息头相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对 MIME 类型 的设定，而不能对其进行修改</span>
<span class="token comment"># nosniff 下面两种情况的请求将被阻止：</span>
<span class="token comment"># 1.请求类型是&quot;style&quot; 但是 MIME 类型不是 &quot;text/css&quot;， </span>
<span class="token comment"># 2.请求类型是&quot;script&quot; 但是 MIME 类型不是 JavaScript MIME 类型。</span>
add_header X-Content-Type-Options <span class="token string">&#39;nosniff&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="x-xss-protection" tabindex="-1"><a class="header-anchor" href="#x-xss-protection" aria-hidden="true">#</a> X-Xss-Protection</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1 启用 XSS 过滤（通常浏览器是默认的）。 如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）。</span>
<span class="token comment"># 1; mode=block,检测到之后阻止页面加载</span>
add_header X-Xss-Protection <span class="token string">&quot;1; mode=block&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="referrer-policy" tabindex="-1"><a class="header-anchor" href="#referrer-policy" aria-hidden="true">#</a> Referrer-Policy</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 决定什么时候要发送\`Referer\` 这个请求头</span>
add_header Referrer-Policy <span class="token string">&#39;strict-origin-when-cross-origin&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="content-security-policy" tabindex="-1"><a class="header-anchor" href="#content-security-policy" aria-hidden="true">#</a> Content-Security-Policy</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这部分主要根据你们的实际地址和请求来修改，可以直接拿浏览器要的hash值配置</span>
<span class="token comment"># 需要注意的是script-src不能使用unsafe，即你的网页用的组件不能使用eval，new Funtion等函数  </span>
<span class="token comment"># 目前我们遇到的是vue需要改成runtime模式  </span>
<span class="token comment"># 还有一个前端导出excel的组件用到了script-loader，需要修改</span>
<span class="token comment"># 资源加载策略 default-src 表示默认情况下</span>
<span class="token comment"># 需要单引号： </span>
<span class="token comment"># self：同源 </span>
<span class="token comment"># unsafe-inline:允许使用内联资源 </span>
<span class="token comment"># unsafe-eval:允许使用 eval()  </span>
<span class="token comment"># 不需要单引号 </span>
<span class="token comment"># data: 协议是data的资源，注意有个冒号(前端加载data:的图片)</span>
<span class="token comment"># http://10.168.0.114:800 后台地址(处理后台的资源，比如验证码)</span>
<span class="token comment"># &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; data:</span>
add_header Content-Security-Policy <span class="token string">&quot;default-src &#39;self&#39;  http://10.168.0.114:800 ;style-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; style-src-elem &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;; script-src &#39;self&#39;  &#39;sha256-V4FYFpBUWq0DlvnqicH7btb0sUDUBetG8lXe/6b+UNE=&#39; &#39;sha256-V4FYFpBUWq0DlvnqicH7btb0sUDUBetG8lXe/6b+UNE=&#39; &#39;sha256-f/7mRa/vWA+2mOUeu3P2kpWNRe7MZZCqJH5rJuB1I0k=&#39; ; script-src-elem &#39;self&#39;  &#39;sha256-V4FYFpBUWq0DlvnqicH7btb0sUDUBetG8lXe/6b+UNE=&#39; &#39;sha256-V4FYFpBUWq0DlvnqicH7btb0sUDUBetG8lXe/6b+UNE=&#39; &#39;sha256-f/7mRa/vWA+2mOUeu3P2kpWNRe7MZZCqJH5rJuB1I0k=&#39;; img-src &#39;self&#39; data: http://10.168.0.114:800; frame-ancestors &#39;self&#39;; font-src &#39;self&#39; data:;&quot;</span><span class="token punctuation">;</span>
       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>大多数比如<code>应用程序错误</code>或者<code>整数溢出</code>之类都是说他传了一个非法值，但是返回错误包含了内部异常，处理方法很简单，对系统进行全局异常处理(@ControllerAdvice)，返回一个内部的错误码，而不要把异常直接返回给前端</li><li>Cookie相关可以在后端应用中设置<code>SameSite</code>或者<code>Secure</code></li><li>发现可缓存的高速SSL页面，可以通过配置<code>Cache-Control</code>设置</li><li>过度的CORS可以在后端配置CORS过滤器的时候不返回<code>*</code>，而是返回特定的<code>Origin</code></li><li>以上都可以通过自己下载一个<code>AppScan</code>自己扫描，生成的报告也有详细的修改建议，但可能有一些规则是安保公司自定义的，这个就得配合安保公司提供的文档测试</li></ul>`,34),c=[t];function r(l,d){return n(),s("div",null,c)}const p=e(i,[["render",r],["__file","0805_dengbao.html.vue"]]);export{p as default};
