import{_ as n,p as s,q as a,Y as t}from"./framework-f2b64c38.js";const p={},e=t(`<h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h2><p>最近学校弄了个自动签到打卡的<br> 在身体健康的情况下<br> 本着学tou习lan的精神<br> 重温一下<strong>python requests</strong>库</p><h2 id="自动签到" tabindex="-1"><a class="header-anchor" href="#自动签到" aria-hidden="true">#</a> 自动签到</h2><p>自动签到其实就是代码模拟我们正常签到发的网络请求<br> 携带上正常的参数即可</p><h3 id="import库" tabindex="-1"><a class="header-anchor" href="#import库" aria-hidden="true">#</a> import库</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
<span class="token keyword">import</span> urllib3
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token comment"># 禁用warning</span>
urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span>urllib3<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InsecureRequestWarning<span class="token punctuation">)</span>
<span class="token comment"># 填写账号密码</span>
userAccounts <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># [&#39;username1&#39;, &#39;password1&#39;],</span>
    <span class="token comment"># [&#39;username2&#39;, &#39;password2&#39;]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分析请求" tabindex="-1"><a class="header-anchor" href="#分析请求" aria-hidden="true">#</a> 分析请求</h3><h4 id="登陆" tabindex="-1"><a class="header-anchor" href="#登陆" aria-hidden="true">#</a> 登陆</h4><p>我们都知道未登录的话会被跳转<br> 所以需要先解决登陆问题<br> 登陆有几种解决方案，<strong>session/JWT</strong>之类的<br> 分析请求可知比较简单是通过session存储的<br> 那么只要获取到<strong>JSESSIONID</strong>即可</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201007133058.png"><p>从图片可以看出需要参数有三个</p><ul><li>username</li><li>password</li><li>rememberme</li></ul><p>那么我们可以通过如下python代码模拟登陆</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 账号密码登陆后返回请求需要headers</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>
        <span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>
        <span class="token string">&#39;rememberMe&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;false&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token comment"># 模拟post请求，verify=False禁用https检测</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
        url<span class="token operator">=</span><span class="token string">&#39;https://tb.gdei.edu.cn/login&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># 获取setCookie字段</span>
    setCookie <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">]</span>
    <span class="token comment"># 获取JSESSIONID</span>
    JSESSIONID <span class="token operator">=</span> setCookie<span class="token punctuation">[</span><span class="token punctuation">:</span>setCookie<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 模拟正常请求构造headers，很多头其实也可以不用</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;Accept&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;*/*&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Accept-Encoding&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gzip, deflate, br&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Accept-Language&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;zh-CN,zh;q=0.9,en;q=0.8,en-US;q=0.7&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Connection&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;keep-alive&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Cookie&#39;</span><span class="token punctuation">:</span> JSESSIONID<span class="token punctuation">,</span>
        <span class="token string">&#39;Host&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;tb.gdei.edu.cn&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Sec-Fetch-Dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;empty&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Sec-Fetch-Mode&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cors&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Sec-Fetch-Site&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;same-origin&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;X-Requested-With&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;XMLHttpRequest&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> headers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="签到" tabindex="-1"><a class="header-anchor" href="#签到" aria-hidden="true">#</a> 签到</h4><p>学校有两个签到的地方<br> 一个是每天的打卡，点击一下即可<br> 一个是填写体温，早上和中午各一次</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201007134039.png"><h5 id="打卡" tabindex="-1"><a class="header-anchor" href="#打卡" aria-hidden="true">#</a> 打卡</h5><p>点击打卡后可以发现请求是get请求，参数只有一个_=13位数字<br> 嗯13位时间戳<br><code>https://domain.cn/system/yqdc/yjtb?_=1602048483670</code></p><p>那么就很简单了<br> 解决打卡只需求模拟get请求<br> 生成一个<strong>13位时间戳</strong>，带上<strong>JSESSIONID</strong>即可</p><p>python代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># process函数处理打卡和签到</span>
<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历账号</span>
    <span class="token keyword">for</span> userAccount <span class="token keyword">in</span> userAccounts<span class="token punctuation">:</span>
        <span class="token comment"># 登陆，获取headers</span>
        headers <span class="token operator">=</span> login<span class="token punctuation">(</span>userAccount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> userAccount<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># 模拟打卡</span>
        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://tb.gdei.edu.cn/system/yqdc/yjtb?_=%d&#39;</span> <span class="token operator">%</span>
                     <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s打卡成功&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>userAccount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="体温签到" tabindex="-1"><a class="header-anchor" href="#体温签到" aria-hidden="true">#</a> 体温签到</h5><p>签到有<strong>晨检</strong>和<strong>午检</strong><br> 我们需要知道参数和请求链接是否一样<br> 经过我的测试<br> 发现早上和中午的请求链接是一样的 参数不同</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201007135529.png"><p>从页面代码看参数有<strong>两部分</strong></p><ul><li>需要填写的，如体温，状态：正常/不适</li><li>不需要填写的，如系别、宿舍号等，这部分是隐藏input</li></ul><p>那么我们可以有以下<strong>思路</strong>：<br> ①访问页面<br> ②用BeautifulSoup解析页面获取不需要填写的参数<br> ③手动填入体温和状态<br> ④发起请求</p><p>python代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 构造体温签到参数</span>
<span class="token keyword">def</span> <span class="token function">getMrcjParams</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># get请求</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
        url<span class="token operator">=</span><span class="token string">&#39;https://tb.gdei.edu.cn/system/mrcj/add&#39;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># BeautifulSoup解析html代码</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 构造params</span>
    params <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment"># &#39;id&#39;: &#39;&#39;,</span>
        <span class="token comment"># &#39;bushi&#39;: &#39;&#39;,</span>
        <span class="token comment"># 找到id为username的input标签的value值</span>
        <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;suse&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;suse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;fanghao&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;fanghao&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;tbname&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;tbname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;xh&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;xh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;depid&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;depid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;xm&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;xm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;dep&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;dep&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;banji&#39;</span><span class="token punctuation">:</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;banji&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment"># 需要我们填写的值</span>
        <span class="token string">&#39;tiwen&#39;</span><span class="token punctuation">:</span> <span class="token number">36.6</span><span class="token punctuation">,</span>
        <span class="token string">&#39;zt&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;正常&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> params

<span class="token comment"># process函数在原有基础上增加体温签到代码</span>
<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历账号</span>
    <span class="token keyword">for</span> userAccount <span class="token keyword">in</span> userAccounts<span class="token punctuation">:</span>
        <span class="token comment"># 登陆，获取headers</span>
        headers <span class="token operator">=</span> login<span class="token punctuation">(</span>userAccount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> userAccount<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># 模拟打卡</span>
        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://tb.gdei.edu.cn/system/yqdc/yjtb?_=%d&#39;</span> <span class="token operator">%</span>
                     <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s打卡成功&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>userAccount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 获取体温签到参数</span>
        mrcjParams <span class="token operator">=</span> getMrcjParams<span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>mrcjParams<span class="token punctuation">)</span>
        <span class="token comment"># post请求,注意指定params和headers</span>
        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">&#39;https://tb.gdei.edu.cn/system/mrcj/add&#39;</span><span class="token punctuation">,</span>
                      params<span class="token operator">=</span>mrcjParams<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s体温签到成功&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>userAccount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 最后记得main函数调用process执行</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    process<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动定时执行" tabindex="-1"><a class="header-anchor" href="#自动定时执行" aria-hidden="true">#</a> 自动定时执行</h2><p>win10下使用自带的定时任务</p><h3 id="添加定时任务" tabindex="-1"><a class="header-anchor" href="#添加定时任务" aria-hidden="true">#</a> 添加定时任务</h3><p>首先我们需要编写一个bat用于win10自动执行</p><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>:: xxx.bat
:: 这个bat用于让win10执行，所以内容为python 代码文件
python xxx.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要添加定时任务，让win10自动执行我们上面编写的文件</p><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>:: 可以直接powershell执行
:: /tn 定时任务的名称
:: /st startTime
:: /sc daily 每天
:: /tr 执行程序
schtasks /create /tn 晨检 /st 09:00 /sc daily /tr C:\\Users\\x5322\\Desktop\\xxx.bat
schtasks /create /tn 午检 /st 12:00 /sc daily /tr C:\\Users\\x5322\\Desktop\\xxx.bat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除定时任务" tabindex="-1"><a class="header-anchor" href="#删除定时任务" aria-hidden="true">#</a> 删除定时任务</h3><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>schtasks /delete/ /tn 晨检
schtasks /delete/ /tn 午检
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">通过&#39;管理&#39;</p><p>右键我的电脑-&gt;管理-&gt;任务计划程序-&gt;任务计划程序库也可以进行设置和删除</p></div><h3 id="centos定时任务" tabindex="-1"><a class="header-anchor" href="#centos定时任务" aria-hidden="true">#</a> Centos定时任务</h3><p>2020-10-13 15:11:02 更新 由于自己win10执行需要开电脑<br> 偶尔忘了就很麻烦<br> 所以就放在云服务器上定时执行</p><h4 id="安装crontabs" tabindex="-1"><a class="header-anchor" href="#安装crontabs" aria-hidden="true">#</a> 安装crontabs</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> crontabs
systemctl <span class="token builtin class-name">enable</span> crontabs
systemctl start crontabs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置定时规则" tabindex="-1"><a class="header-anchor" href="#配置定时规则" aria-hidden="true">#</a> 配置定时规则</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/crontab
<span class="token comment"># 分钟（0~59）、小时（0~23）、天（1~31）、月(1~12)、星期(0~6)、用户名、要执行的命令或者脚本</span>
<span class="token comment"># *表示每天每月每星期</span>
<span class="token comment"># 每天8点和12点打卡</span>
00 08 * * * root python /opt/xxx.py
00 <span class="token number">12</span> * * * root python /opt/xxx.py

<span class="token comment"># 修改生效</span>
<span class="token function">crontab</span> /etc/crontab

<span class="token comment"># 查看定时任务</span>
<span class="token function">crontab</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="题外话" tabindex="-1"><a class="header-anchor" href="#题外话" aria-hidden="true">#</a> 题外话</h4><p>写完才发现执行不了<br> 试了一下curl发现卡住了<br> 加上-v参数查看<br> 应该是只能内网访问<br> 这就尴尬了。。<br> 但不管怎么说学了一下Centos的定时任务</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>重温了一下requests的使用<br> 以及使用函数来编写python<br> 之前写的python文件基本都是直接写<br> 没有函数，看起来乱乱的<br> 代码的结构确实会好看很多哈哈</p><p>另外就是前面的体温我是写死的36.6<br> 其实也可以让其随机在36.5-36.9这样子<br> 就不会固定了太过明显(haipa)</p><p>定时也可以用程序自身来实现<br> 但需要一直运行就觉得用win10自带的来实现也可以</p>`,52),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","pythonzidongqiandao.html.vue"]]);export{r as default};
