import{_ as a,p as s,q as n,Y as e}from"./framework-f2b64c38.js";const t={},p=e(`<h1 id="maven-archtype模板" tabindex="-1"><a class="header-anchor" href="#maven-archtype模板" aria-hidden="true">#</a> maven archtype模板</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>目前的情况下我司经常会需要有本地部署且额外写程序对接的情况，故我写了一个模板，但是我希望能够通过模板快速创建项目，并可以自定义配置，maven的Archetype很符合我的要求。</p><h2 id="前提" tabindex="-1"><a class="header-anchor" href="#前提" aria-hidden="true">#</a> 前提</h2><p>假设我现在已经有了一个SpringBoot模板项目，包含了各种依赖，写好了Bean和Configuration等</p><h2 id="生成模板" tabindex="-1"><a class="header-anchor" href="#生成模板" aria-hidden="true">#</a> 生成模板</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 添加maven插件 --&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-archetype-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在项目根目录生成模板</span>
mvn archetype:create-from-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在target下面生成了一个目录<code>archetype</code></p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410094451.png"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入目录</span>
<span class="token builtin class-name">cd</span> target/generated-sources/archetype
<span class="token comment"># 安装到本地仓库</span>
mvn <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>install之后可以在我们的maven仓库中看到</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410094900.png"><h2 id="使用模板" tabindex="-1"><a class="header-anchor" href="#使用模板" aria-hidden="true">#</a> 使用模板</h2><h3 id="本地" tabindex="-1"><a class="header-anchor" href="#本地" aria-hidden="true">#</a> 本地</h3><p>在命令行执行<br><code>mvn archetype:generate -DarchetypeCatalog=local</code></p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410095530.png"><p>打开新项目查看，可以看到pom文件的信息都是我们的刚刚配置的<br> 说明最简单的操作已经成功了</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410095817.png"><h3 id="远端" tabindex="-1"><a class="header-anchor" href="#远端" aria-hidden="true">#</a> 远端</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本质上是从仓库拉取，本地没有就找远端仓库，必要情况下可以配置仓库地址</span>
<span class="token comment"># interactiveMode = false表示不使用交互模式</span>
<span class="token comment"># 前4个参数指定新项目的信息</span>
<span class="token comment"># archetype开头的3个参数指定模板的信息</span>
 mvn archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>sss <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>ddd <span class="token parameter variable">-Dversion</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">-Dpackage</span><span class="token operator">=</span>fff <span class="token parameter variable">-DarchetypeGroupId</span><span class="token operator">=</span><span class="token string">&#39;cn.ikarosx&#39;</span> <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span><span class="token string">&#39;ikarosx-template-archetype&#39;</span> <span class="token parameter variable">-DarchetypeVersion</span><span class="token operator">=</span><span class="token string">&#39;1.0-SNAPSHOT&#39;</span> <span class="token parameter variable">-DinteractiveMode</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>archetype插件还提供了配置文件的形式创建模板</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># ./archetype.properties</span>
<span class="token comment"># 模板配置</span>
<span class="token key attr-name">archetype.groupId</span><span class="token punctuation">=</span><span class="token value attr-value">my.group.id</span>
<span class="token key attr-name">archetype.artifactId</span><span class="token punctuation">=</span><span class="token value attr-value">my-archetype</span>
<span class="token key attr-name">archetype.version</span><span class="token punctuation">=</span><span class="token value attr-value">1.0.3-SNAPSHOT</span>

<span class="token comment"># 自定义变量</span>
<span class="token comment"># 是否使用swagger</span>
<span class="token key attr-name">useSwagger</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># 模板使用的语言</span>
<span class="token comment"># archetype.languages have: java, groovy, csharp, aspectj.</span>
<span class="token key attr-name">archetype.languages</span><span class="token punctuation">=</span><span class="token value attr-value">groovy</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置文件创建模板</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn archetype:create-from-project 
-D<span class="token string">&#39;archetype.properties&#39;</span><span class="token operator">=</span>./archetype.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件有几个好处</p><ol><li>配置模板信息无需手动填写</li><li>可以自定义变量，实现动态模板</li><li>修改一些插件提供的其他配置</li></ol><h2 id="通过变量动态化处理模板内容" tabindex="-1"><a class="header-anchor" href="#通过变量动态化处理模板内容" aria-hidden="true">#</a> 通过变量动态化处理模板内容</h2><p>先<code>create-from-project</code>后，进入archetype的文件内进行变量处理</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410105126.png"><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">// 如果useSwagger是true，就加入swagger的依赖</span>
#<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">$</span>useSwagger <span class="token operator">&amp;&amp;</span> <span class="token punctuation">$</span>useSwagger <span class="token operator">==</span> <span class="token interpolation-string"><span class="token string">&quot;true&quot;</span></span> <span class="token punctuation">)</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> swagger <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>cn<span class="token punctuation">.</span>ikarosx<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>commons<span class="token operator">-</span>swagger3<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
#end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理完需要install，这部分和前面的一样</p><p>在通过模板创建项目的时候可以通过控制useSwagger变量控制是否显示内容</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410103904.png"><h2 id="实际使用" tabindex="-1"><a class="header-anchor" href="#实际使用" aria-hidden="true">#</a> 实际使用</h2><p>落地使用时会发现这样的问题<br> 上面的动态化处理模板会出现每次执行<code>create-from-project</code>都会重置文件<br> 前面的动态化处理都会消失<br> 这是因为每次都会清空target然后重新build，又是从源码里复制一份<br> 导致我们写的条件判断语句是会清空的<br> 所以正确的方式应该是把这个模板项目直接写成动态的<br> 即将条件判断等操作直接写入源文件<br> 可以考虑第一次先<code>create-from-project</code><br> 因为第一次会让插件自动处理我们生成的包路径之类<br> 然后再以这个项目为基础直接改写我们需要的动态条件</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230410112537.png"><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果不需要动态变量那么复杂，那么直接用原本项目<code>create-from-project</code>即可<br> 如果需要用到变量判断，那么直接将判断写在原项目比较好。</p>`,40),r=[p];function c(o,i){return s(),n("div",null,r)}const d=a(t,[["render",c],["__file","0410_maven_archetypemoban.html.vue"]]);export{d as default};
