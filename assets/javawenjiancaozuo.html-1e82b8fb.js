import{_ as c,n as p,p as o,q as i,s,R as n,t as e,Y as t}from"./framework-f2b64c38.js";const l={},u=t(`<h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h2><p>在项目中少不了读取文件，比如读取application.yaml/密钥/模板文件<br> 但一直分不清classpath:xx.xx和xx.xx应该怎么使用<br> 所以想好好理解一下java对于文件的操作方式</p><h2 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> File</h2><h3 id="构造file对象" tabindex="-1"><a class="header-anchor" href="#构造file对象" aria-hidden="true">#</a> 构造File对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这应该是我们最熟悉的使用方式了</span>
<span class="token comment">// 构造一个File对象</span>
<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 操作对象</span>
<span class="token comment">// 创建文件</span>
file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断是否存在</span>
file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 列出文件</span>
file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 判断是否是文件夹</span>
file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">父目录要存在</p><p><code>new File(&quot;a/1.txt&quot;)</code><br> a目录要存在，不然会报错</p></div><h3 id="项目中new-file相对路径" tabindex="-1"><a class="header-anchor" href="#项目中new-file相对路径" aria-hidden="true">#</a> 项目中new File相对路径</h3><p>我遇到了这么一个问题<br> 根据文档，构造File对象传入的参数可以是绝对路径也可以是相对路径<br> 但是使用相对路径时一直有毛病</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// projectName/src/main/java/Test.java</span>
<span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 预料中的效果应该是创建了projectName/src/main/java/1.txt</span>
<span class="token comment">// 结果运行之后创建了projectName/1.txt</span>
<span class="token comment">// 这明显就不符合相对路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后来发现这里的相对路径指的是运行时的相对路径<br> 启发来自下图</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200811171343.png"><p>然后一脸兴奋点开，想着应该是这里指定了当前的目录<br> 结果发现这里只是指定了classpath和encoding</p>`,12),r={href:"http://blog.ikarosx.cn/docs/views/Web/2020/08/MavenPlugin.html",target:"_blank",rel:"noopener noreferrer"},d=s("br",null,null,-1),k=s("br",null,null,-1),m=s("img",{src:"https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200811171836.png"},null,-1),h=s("br",null,null,-1),v={href:"https://www.jetbrains.com/help/idea/run-debug-configuration-java-scratch.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<details class="custom-container details"><summary class="custom-container-title">WorkingDirectory</summary><p>Specify the working directory to be used for running the application. This directory is the starting point for all relative input and output paths. By default, the field contains the directory where the project file resides. To specify another directory, click the Browse button and select the directory.</p></details><p>WorkingDirectory是相关的输入输出路径的起点，所以相对路径是以这个设置为准<br> 这也是为什么我们的相对路径跑到了项目根目录去了</p><h2 id="classpath" tabindex="-1"><a class="header-anchor" href="#classpath" aria-hidden="true">#</a> ClassPath</h2><p>ClassPath是JVM去搜索我们使用的类的地方</p><p>对于War项目，classpath是打包后的WEB-INF中的classes，lib目录<br> 对于IDEA普通项目，classpath通常是out/project</p><h3 id="getresource" tabindex="-1"><a class="header-anchor" href="#getresource" aria-hidden="true">#</a> getResource</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 路径在类中是相对于包的相对路径，比如Test类在test包下</span>
<span class="token comment">// 则a.txt表示test/a.txt，/a.txt表示a.txt</span>
<span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 路径在ClassLoader中是绝对路径，如果填的是/a.txt，则会去根目录寻找</span>
<span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getresourceasstream" tabindex="-1"><a class="header-anchor" href="#getresourceasstream" aria-hidden="true">#</a> getResourceAsStream</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这样也可以获取文件，只不过返回一个InputStream 对象</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-resource" tabindex="-1"><a class="header-anchor" href="#spring-resource" aria-hidden="true">#</a> Spring Resource</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Resource类比File对象，可以执行比如exists等方法</span>
<span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过ResourceUtils，支持classpath:和file:前缀</span>
<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">ResourceUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">classpath:</p><p>我们经常在Spring里写classpath:application.properties<br> 就是去classpath寻找<br> 但要注意<code>new File(&quot;classpath:1.txt&quot;)</code>这种写法是不支持的</p></div><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h2><p>Path是jdk1.7引入的用来在文件系统中定位一个文件的对象<br> 配合Files工具类使用可以很方便对文件进行操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">&quot;1.txt&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// new Path(Test.class.getClassLoader.getResource(&quot;1.txt&quot;))</span>
<span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Path</span> source<span class="token punctuation">,</span> <span class="token class-name">Path</span> target<span class="token punctuation">,</span> <span class="token class-name">CopyOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token class-name">Path</span> source<span class="token punctuation">,</span> <span class="token class-name">Path</span> target<span class="token punctuation">,</span> <span class="token class-name">CopyOption</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>在项目中用到classpath的地方很多<br> 但总是由于不熟悉获取不到<br> 希望之后可以一举解决该类问题哈哈</p>`,17);function b(f,x){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,s("p",null,[n("然后幸好是之前在写"),s("a",r,[n("MavenPlugin"),e(a)]),n("时的经验"),d,n(" 因为我们在IDEA里运行是点击Run/Debug"),k,n(" 那么就有相应的配置文件")]),m,s("p",null,[n("果然发现了罪魁祸首WorkingDirectory"),h,n(" 查看"),s("a",v,[n("官网资料"),e(a)])]),g])}const j=c(l,[["render",b],["__file","javawenjiancaozuo.html.vue"]]);export{j as default};
