import{_ as s,p as e,q as a,Y as n}from"./framework-f2b64c38.js";const i={},r=n(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>昨天发的搭建vuepress，用到了scp来上传到云服务器<br> 于是打算发一篇SSH登陆的<br> 虽然以前也有用过<br> 但不是很熟悉</p></div><h2 id="预备知识" tabindex="-1"><a class="header-anchor" href="#预备知识" aria-hidden="true">#</a> 预备知识</h2><h3 id="两种级别的安全验证" tabindex="-1"><a class="header-anchor" href="#两种级别的安全验证" aria-hidden="true">#</a> 两种级别的安全验证</h3><p>SSH有两种级别的安全验证</p><ul><li>基于口令</li><li>基于密钥</li></ul><h3 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密" aria-hidden="true">#</a> 非对称加密</h3><p>非对称加密有两个密钥：公钥和私钥<br> 公钥加密的需要用私钥解密<br> 私钥加密的需要用公钥解密</p><h2 id="登陆命令" tabindex="-1"><a class="header-anchor" href="#登陆命令" aria-hidden="true">#</a> 登陆命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果没有配置SSH密钥，回车后需要输入账号的密码</span>
<span class="token function">ssh</span> 用户名@主机
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="口令登陆原理" tabindex="-1"><a class="header-anchor" href="#口令登陆原理" aria-hidden="true">#</a> 口令登陆原理</h2><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/SSH密码登陆原理.png"><h2 id="密钥登陆原理" tabindex="-1"><a class="header-anchor" href="#密钥登陆原理" aria-hidden="true">#</a> 密钥登陆原理</h2><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/SSH免密登陆原理.png"><h2 id="生成公私钥" tabindex="-1"><a class="header-anchor" href="#生成公私钥" aria-hidden="true">#</a> 生成公私钥</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -t指定密钥算法，-C为备注</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;youemail@xx.com&quot;</span>
<span class="token comment"># 然后会让你是否输入私钥的密码，测试用可以不输入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">私钥密码</p><p>不设置的时候，ssh可以直接免密登陆,但得确保证书不泄露<br> 设置的时候，ssh需要输入私钥密码(<strong>不是用户密码</strong>)</p></div><p>生成的文件默认放在了<code>~/.ssh/</code>下</p><ul><li>id_rsa</li><li>id_rsa.pub</li></ul><h2 id="证书登陆部署公钥到服务器" tabindex="-1"><a class="header-anchor" href="#证书登陆部署公钥到服务器" aria-hidden="true">#</a> 证书登陆部署公钥到服务器</h2><h3 id="手动追加文件" tabindex="-1"><a class="header-anchor" href="#手动追加文件" aria-hidden="true">#</a> 手动追加文件</h3><p>把公钥追加到~/.ssh/authorized_keys文件里<br> 上传公钥到服务器,用命令<code>cat id_rsa.pub &gt;&gt; authorized_keys</code></p><h3 id="ssh-copy-id" tabindex="-1"><a class="header-anchor" href="#ssh-copy-id" aria-hidden="true">#</a> ssh-copy-id</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -i指定你的公钥文件目录，后面跟上你要指定的用户名和服务器</span>
<span class="token comment"># 如果windows下命令未找到，可以尝试使用wsl里的命令</span>
<span class="token comment"># 我能在git上找到对应的命令，但无法运行，可能是不支持？</span>
ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub ikarosx@ikarosx.cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">服务器如何寻找authorized_keys</p><p>根据你选择的用户名,找到服务器对应用户下的.ssh目录的authorized_keys<br> 如果不指定用户名，会先去<code>~/.ssh/config</code>找<br> 如果没有找到，就会使用当前登录用户作为用户名</p></div><h2 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h2><p>部署公钥到服务器之后就可以使用证书登陆了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> Ikarosx@ikarosx.cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="中间人攻击" tabindex="-1"><a class="header-anchor" href="#中间人攻击" aria-hidden="true">#</a> 中间人攻击</h3><p>使用口令登陆可能存在中间人攻击 <img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/SSH中间者.png"></p><h4 id="指纹验证" tabindex="-1"><a class="header-anchor" href="#指纹验证" aria-hidden="true">#</a> 指纹验证</h4><p>在第一次连接的时候会有一个提示</p><blockquote><p>The authenticity of host &#39;xxxxx&#39; can&#39;t be established.<br> ECDSA key fingerprint is SHA256:+0HbtPMHKf/OpdTOi4ze9yxz99YC37VtCH+6K8Re9kE.<br> Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>这个就是让我们确认这个主机的指纹是否是正确的</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">指纹哪里来</p><p>指纹是来自服务器的ECDSA公钥指纹 我们可以通过下面命令自己校验一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -E可以指定算法,-l为查看指纹,-f指定文件 服务器的公钥存放在/etc/ssh里</span>
ssh-keygen <span class="token parameter variable">-lf</span> /etc/ssh/ssh_host_ecdsa_key.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>当我们输入yes的时候即表示信任该服务器<br> 然后就会存放入<code>~/.ssh/known_hosts</code>里</p><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> .ssh</h2><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p>我们在<code>.ssh/</code>下新建文件<code>config</code><br> 对其进行配置，以满足我们多样化的需求<br> 默认情况下，不指定<code>-i</code>证书位置<br> 会按顺序找下面几个文件，如果都不满足则要求你输入登陆密码</p><ul><li>~/.ssh/id_rsa</li><li>~/.ssh/id_dsa</li><li>~/.ssh/id_ecdsa</li><li>~/.ssh/id_ed25519</li></ul><p>默认情况下不管我们连接哪台服务器都会去找几个私钥<br> 那么当我们想要为多个服务器配置多个密钥就可以用config来指定</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 别名，即@之后的名字，如果@之后的是ikarosx1.cn，就会找到这里的HostName，这是实际访问的主机</span>
Host ikarosx1.cn
    <span class="token comment"># 当ssh命令为ssh ikarosx.cn时会先来config找这里的User，找不到才是当前登陆用户</span>
    User Ikarosx
    <span class="token comment"># 实际主机名</span>
    HostName ikarosx.cn
    <span class="token comment"># 证书位置</span>
    IdentityFile ~/.ssh/ikarosx/id_rsa

Host github.com
    User Ikarosx
    HostName github.com
    IdentityFile ~/.ssh/github/id_rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="known-hosts" tabindex="-1"><a class="header-anchor" href="#known-hosts" aria-hidden="true">#</a> known_hosts</h3><p>存放信任的主机</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><ul><li>本文所描述的是认证阶段，前面应该还有版本协商、算法协商和通过DH算法来交换密钥的过程</li><li>中间人攻击会发生在第一次连接的时候，所以要确保指纹验证是正确的</li><li>SSL和SSH有点类似，但SSH是人工验证指纹，而SSL使用的是CA机构来认证</li></ul>`,45),d=[r];function c(t,o){return e(),a("div",null,d)}const h=s(i,[["render",c],["__file","SSHyonghurenzheng.html.vue"]]);export{h as default};
