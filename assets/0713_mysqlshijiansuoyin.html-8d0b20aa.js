import{_ as t,n as r,p as i,q as o,s,R as e,t as l,Y as a}from"./framework-f2b64c38.js";const c={},d=a(`<h1 id="mysql时间" tabindex="-1"><a class="header-anchor" href="#mysql时间" aria-hidden="true">#</a> mysql时间</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>前几天朋友发了一个问题</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 表结构 type/status/create_time</span>
<span class="token comment">-- type区分度比status高，应该如何加索引</span>

<span class="token number">1.</span> <span class="token keyword">type</span>
<span class="token number">2.</span> <span class="token keyword">type</span> <span class="token keyword">status</span> create_time
<span class="token number">3.</span> <span class="token keyword">type</span> create_time

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个人讨论后有个人说不需要create_time，说create_time只有在 = 才生效<br> 但按我自己的理解是create_time也可以走索引范围查询<br> 因此搜了一些资料加深自己的理解</p><h2 id="日期索引" tabindex="-1"><a class="header-anchor" href="#日期索引" aria-hidden="true">#</a> 日期索引</h2><p>先说结论，日期索引是可以走范围查询的<br> 如下展示了mysql中单索引和联合索引的使用<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora202207151735119.png"></p>`,7),p=s("br",null,null,-1),m={href:"https://blog.csdn.net/ibigboy/article/details/104571930?depth_1-",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>而取舍就是是否需要再加一个status<br> 即(type status create_time) 和 (type create_time)<br> 由于status区分度不高，实际上可以不加<br> 加了就是耗费点空间，按我目前的知识是这么理解的</p><h2 id="几种时间" tabindex="-1"><a class="header-anchor" href="#几种时间" aria-hidden="true">#</a> 几种时间</h2><table><thead><tr><th>类型</th><th>格式</th><th>范围</th></tr></thead><tbody><tr><td>Date</td><td>YYYY-MM-DD</td><td>&#39;1000-01-01&#39; to &#39;9999-12-31&#39;</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD hh:mm:ss.000000</td><td>&#39;1000-01-01 00:00:00&#39; to &#39;9999-12-31 23:59:59&#39;</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD hh:mm:ss.000000</td><td>&#39;1970-01-01 00:00:01&#39; UTC to &#39;2038-01-19 03:14:07&#39; UTC</td></tr></tbody></table><h2 id="timestamp" tabindex="-1"><a class="header-anchor" href="#timestamp" aria-hidden="true">#</a> timestamp</h2><p>timestamp是<strong>携带时区</strong>的，存储时以UTC存储<br> mysql存储timestamp时会转换为UTC存储，取出来的时候会恢复成当前服务器的TimeZone<br> 默认下time zone是服务器的时间<br> JDBC中，我们可以给每个连接设置time zone<br> 如果你存进数据库后，修改了连接的serverTimeZone，那么取出来的值也会不一样<br> 比如在GMT+8时，取出来的值是2022-7-8 08:57:35<br> 那么GMT+6时取出来的值是2022-7-8 06:57:35</p><blockquote><p>注意DATETIME不携带时区</p></blockquote><p>timestamp最大支持2038年是因为Int最大2147483647</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora202207201406676.png"><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>myql 8.0.19后可以给TIMESTAMP or DATETIME在表中指定time zone offset</li><li>非法的DATE, DATETIME, or TIMESTAMP会被转化为0，如果SQL mode 支持NO_ZERO_DATE的话</li><li>mysql 8.0.22后可以通过CAST和at time zone将timestamp转换成datetime</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- mysql会自动识别一些格式的时间</span>
<span class="token comment">-- 等价于create_time &gt; &#39;2022-07-01&#39;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> create_time <span class="token operator">&gt;</span> <span class="token string">&#39;22:07:01&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 等价于create_time &gt; &#39;0000-00-00&#39;，因为50不是一个合法的月份</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> create_time <span class="token operator">&gt;</span> <span class="token string">&#39;22:50:01&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- create_time为timestamp类型，转换为DATETIME</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span>create_time AT <span class="token keyword">TIME</span> ZONE <span class="token keyword">INTERVAL</span> <span class="token string">&#39;+00:00&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">DATETIME</span><span class="token punctuation">)</span> ut <span class="token keyword">FROM</span> time_demo

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function h(k,b){const n=r("ExternalLinkIcon");return i(),o("div",null,[d,s("p",null,[e("我主要是纠结联合索引的画法"),p,e(" 后面参考了"),s("a",m,[e("CSDN的一篇文章"),l(n)])]),u])}const v=t(c,[["render",h],["__file","0713_mysqlshijiansuoyin.html.vue"]]);export{v as default};
