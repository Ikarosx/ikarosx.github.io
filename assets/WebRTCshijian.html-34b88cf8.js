import{_ as o,n as p,p as c,q as r,s as n,R as a,t as e,Y as t}from"./framework-f2b64c38.js";const i={},l=t('<h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h2><p>舍友不知道哪里看到了WebRTC这个东西<br> 然后就怂恿我去学这个</p><p>结果来说截止2020年2020年10月25日01:36:37实现了<br> ①一对一 ②[一对多]直播间(https://parva.cool/zbj/) 虾哥友情赞助 2020年10月25日00:10:36更新 ③多对多</p><p>demo以及源代码地址https://stun.ikarosx.cn/wx/20201023WebRTC%E5%AE%9E%E8%B7%B5</p><p>实现基于P2P<br> 也就是流量不经过服务器<br> 而是客户端之间直接通信</p><h2 id="webrtc" tabindex="-1"><a class="header-anchor" href="#webrtc" aria-hidden="true">#</a> WebRTC</h2><p>WebRTC是指网络实时通信<strong>Web Real Time Communication</strong><br> Google是WebRTC的主要支持者和开发者</p>',7),u={href:"https://www.w3.org/TR/webrtc/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://datatracker.ietf.org/doc/search?name=rtc&sort=&rfcs=on&activedrafts=on&by=group&group=",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>通过浏览器音视频实时通信底层需要处理很多问题<br> 比如不断波动的带宽和延迟，音视频编码解码<br> W3C规范定义了一组跟媒体捕获与流相关的<strong>JavaScript API</strong><br> 方便开发者使用</p><h2 id="js相关" tabindex="-1"><a class="header-anchor" href="#js相关" aria-hidden="true">#</a> JS相关</h2><h3 id="主要对象" tabindex="-1"><a class="header-anchor" href="#主要对象" aria-hidden="true">#</a> 主要对象</h3><ul><li>RTCPeerConnection，表示本地计算机和远程计算机之间的WebRTC连接</li><li>navigator.mediaDevices，navigator对象包含有关浏览器的信息，所有浏览器都包含这个对象，mediaDevices则是提供了与媒体设备交互的能力，比如摄像头、麦克风以及屏幕分享等</li></ul><h3 id="获取摄像头demo" tabindex="-1"><a class="header-anchor" href="#获取摄像头demo" aria-hidden="true">#</a> 获取摄像头demo</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 展示窗口标签 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localVideo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoplay</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">function</span> <span class="token function">getLocalCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 配置参数，是否获取音频和视频，更多配置请看</span>
            <span class="token comment">// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia</span>
            <span class="token keyword">let</span> constraints <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">// 通过navigator.mediaDevices.getUserMedia获取摄像头和麦克风</span>
            <span class="token comment">// 这里要注意，有两种写法</span>
            <span class="token comment">// 一种是navigator.getUserMedia(constraints, successCallBack, failureCallBack)</span>
            <span class="token comment">// 第二种是navigator.mediaDevices.getUserMedia(constraints).thenc写法</span>
            <span class="token comment">// 现在是推荐第二种，第一种已经deprecated过期了</span>
            navigator<span class="token punctuation">.</span>mediaDevices
                <span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 成功回调</span>
                    <span class="token comment">// 将获取到的流设置到我们的标签上</span>
                    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#localVideo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 异常打印信息</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;获取摄像头失败:&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调用一下函数</span>
        <span class="token function">getLocalCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面代码复制成一个html文件即可访问本机</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201024001238.png"><h3 id="本地测试一对一" tabindex="-1"><a class="header-anchor" href="#本地测试一对一" aria-hidden="true">#</a> 本地测试一对一</h3><p>相关知识</p><ul><li>STUN/TURN服务器</li><li>NAT</li><li>SDP</li><li>P2P</li><li>WebSocket</li></ul><h4 id="nat" tabindex="-1"><a class="header-anchor" href="#nat" aria-hidden="true">#</a> NAT</h4><p>WebRTC需要实现音视频<strong>P2P</strong>点对点<br> 点对点指的是我们传输的时候直接连接到对方的IP:port<br> 而不需要经过服务器<br> 但由于IPV4地址不够<br> 所以我们现在很多主机IP都是10.0.x.x/192.168.x.x<br> 这些都是通过<strong>NAT</strong>转换而来的<br> 比如网络出口IP为1.2.3.4<br> 那么<br> 内网IP为192.168.1.3对应的外网IP可能是1.2.3.4:222<br> 内网IP为192.168.1.4对应的外网IP可能是1.2.3.4:223<br> 实际上的NAT转换还分<strong>锥型</strong>NAT和<strong>对称型</strong>NAT</p><ul><li>完全锥型NAT，Full Cone NAT</li><li>受限锥型NAT，Restricted Cone NAT</li><li>端口受限型NAT，Port Restricted Cone NAT</li><li>对称型NAT，Symmetric NAT</li></ul><h4 id="stun-turn" tabindex="-1"><a class="header-anchor" href="#stun-turn" aria-hidden="true">#</a> STUN/TURN</h4><p>我们的STUN/TURN服务器就是为了解决NAT问题<br><strong>STUN</strong>可以解决<strong>Full Cone NAT</strong>型的NAT<br> google提供了<strong>免费</strong>的STUN服务器<code>stun:stun.l.google.com:19302</code><br> 当STUN无法解决时则需要TURN服务器<br> TURN服务器充当了一个<strong>中转</strong>的角色<br> 即A与B通信，实际是A发往TURN，TURN发往B这样子<br> 从这层意义上来说不能算完全的P2P</p><h4 id="交互流程" tabindex="-1"><a class="header-anchor" href="#交互流程" aria-hidden="true">#</a> 交互流程</h4>`,17),b={href:"https://www.twilio.com/docs/stun-turn/faq#faq-how-does-nat-work",target:"_blank",rel:"noopener noreferrer"},h=t('<img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/WebRTC.png"><p>这里我们需要一个信令服务器<br> 虽然是P2P，但只是传输数据的时候不通过我们的服务器<br> 但把客户端联系起来还是需要到信令服务器的<br> 本篇文章采用WebSocket</p><p>所以实现部分除了页面代码<br> 还需要搭建一个<strong>WebSocket</strong>服务器</p><p>WebSocket服务器主要负责存储用户连接<br> 以及转发各种事件<br> 比如offer/answer/candidate等<br> 采用nodejs实现</p><p>这里由于代码过多<br> 已经放在了开头 代码里都有注释</p><h3 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多" aria-hidden="true">#</a> 一对多</h3><p>思路其实和一对一 一样<br> 问题在于一的一方需要维护多个RTCPeerConnection<br> 以及WebSocket需要处理转发给多个webSocket对象</p><p>类似实现就是<strong>直播间</strong><br> 贴上舍友写的demo https://parva.cool/zbj/</p><h3 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多" aria-hidden="true">#</a> 多对多</h3><p>同上，每一个用户都维护多个RTCPeerConnection</p><h3 id="屏幕分享" tabindex="-1"><a class="header-anchor" href="#屏幕分享" aria-hidden="true">#</a> 屏幕分享</h3><p>我们除了可以获取摄像头<br> 也可以获取屏幕分享<br> 很多人在线上笔试的时候也许有发现一个屏幕分享的功能<br> 那个就是用 <code>navigator.mediaDevices.getDisplayMedia</code>实现的<br> 其他部分没什么区别<br> 会了摄像头很简单就能切换到屏幕分享<br> 但仅限chrome<br> 这也是为什么很多笔试面试都要求使用chrome的特定版本以上</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通过这几天对于WebRTC的学习<br> 明白了会使用是不够的<br> 真的要会懂原理<br> 而最好的方法就是看协议<br> rfc<br> 比如期间使用TURN服务器遇到的问题<br> 不明白运作原理根本无从下手</p>',14);function m(v,g){const s=p("ExternalLinkIcon");return c(),r("div",null,[l,n("ul",null,[n("li",null,[a("Web Real-Time Communications (WEBRTC) W3C Working Group是负责定义浏览器接口部分标准的组织"),n("a",u,[a("w3cWebRTC文档"),e(s)])]),n("li",null,[a("Real-Time Communication in Web-browsers (RTCWEB) 是 IETF 工作组，负责定义协议，数据格式，安全，以及一切技术底层，"),n("a",d,[a("draft以及rfc地址"),e(s)])])]),k,n("p",null,[n("a",b,[a("参考该篇文章"),e(s)]),a("制作出来的交互图")]),h])}const f=o(i,[["render",m],["__file","WebRTCshijian.html.vue"]]);export{f as default};
