import{_ as t,n as e,p,q as o,s as n,R as s,t as c,Y as l}from"./framework-f2b64c38.js";const i={},u=n("h1",{id:"logback",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logback","aria-hidden":"true"},"#"),s(" logback")],-1),k={href:"https://github.com/ceki",target:"_blank",rel:"noopener noreferrer"},r=n("br",null,null,-1),d=l(`<h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 引入jar包 --&gt;</span>
<span class="token comment">&lt;!-- logback-classic包含了slf4j-api.jar and logback-core.jar --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>ikarosx</span><span class="token punctuation">;</span>

<span class="token comment">// 注意我们并没有使用到logback相关的类,这主要得益于slf4j帮我们做了一些事情，详情见</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Ikarosx
 * <span class="token keyword">@date</span> 2022/7/21 17:19
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;cn.ikarosx.demo info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;cn.ikarosx.demo debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;cn.ikarosx.demo error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码运行后会输出</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token time number">17:37:38.502</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token level info keyword">INFO</span> cn<span class="token punctuation">.</span>ikarosx<span class="token punctuation">.</span>Demo <span class="token operator">-</span> <span class="token domain constant">cn.ikarosx.demo</span> info
<span class="token time number">17:37:38.505</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token level debug keyword">DEBUG</span> cn<span class="token punctuation">.</span>ikarosx<span class="token punctuation">.</span>Demo <span class="token operator">-</span> <span class="token domain constant">cn.ikarosx.demo</span> debug
<span class="token time number">17:37:38.505</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token level error important">ERROR</span> cn<span class="token punctuation">.</span>ikarosx<span class="token punctuation">.</span>Demo <span class="token operator">-</span> <span class="token domain constant">cn.ikarosx.demo</span> error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在找不到配置文件的情况下，logback会添加一个<code>ConsoleAppender</code>作为root logger</p><h2 id="打印logback内部状态" tabindex="-1"><a class="header-anchor" href="#打印logback内部状态" aria-hidden="true">#</a> 打印logback内部状态</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>ikarosx</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StatusPrinter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> Ikarosx
 * <span class="token keyword">@date</span> 2022/7/21 17:19
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 打印内部状态</span>
        <span class="token class-name">LoggerContext</span> loggerContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StatusPrinter</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>loggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过logback内置方法<code>StatusPrinter.print</code>打印一下logback的<span id="error">状态</span></p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token time number">17:49:51,155</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token level info keyword">INFO</span> in ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>LoggerContext<span class="token punctuation">[</span>default<span class="token punctuation">]</span> <span class="token operator">-</span> Could NOT find resource <span class="token punctuation">[</span>logback<span class="token operator">-</span>test<span class="token punctuation">.</span>xml<span class="token punctuation">]</span>
<span class="token time number">17:49:51,156</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token level info keyword">INFO</span> in ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>LoggerContext<span class="token punctuation">[</span>default<span class="token punctuation">]</span> <span class="token operator">-</span> Could NOT find resource <span class="token punctuation">[</span>logback<span class="token punctuation">.</span>xml<span class="token punctuation">]</span>
<span class="token time number">17:49:51,159</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token level info keyword">INFO</span> in ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>BasicConfigurator<span class="token operator">@</span><span class="token number">3f91beef</span> <span class="token operator">-</span> Setting up default configuration<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到日志输出没有找到配置文件<code>logback.xml</code>和<code>logback-test.xml</code><br> 因此使用了默认的配置<code>ch.qos.logback.classic.BasicConfigurator</code><br> 打开这个类可以看到默认是添加了一个<code>ConsoleAppender</code>作为root logger</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ch.qos.logback.classic.BasicConfigurator</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicConfigurator</span> <span class="token keyword">extends</span> <span class="token class-name">ContextAwareBase</span> <span class="token keyword">implements</span> <span class="token class-name">Configurator</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">BasicConfigurator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">LoggerContext</span> lc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addInfo</span><span class="token punctuation">(</span><span class="token string">&quot;Setting up default configuration.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">ConsoleAppender</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">&gt;</span></span> ca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ca<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ca<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LayoutWrappingEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">&gt;</span></span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutWrappingEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        encoder<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
 
        <span class="token comment">// same as </span>
        <span class="token comment">// PatternLayout layout = new PatternLayout();</span>
        <span class="token comment">// layout.setPattern(&quot;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot;);</span>
        <span class="token class-name">TTLLLayout</span> layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TTLLLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        layout<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        layout<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        encoder<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        ca<span class="token punctuation">.</span><span class="token function">setEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ca<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">Logger</span> rootLogger <span class="token operator">=</span> lc<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token constant">ROOT_LOGGER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rootLogger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个<code>Appender</code>可以看成是对于输出的描述，包括但不限于<code>console, files, Syslog, TCP Sockets, JMS</code><br> 我们可以编写自己的Appender来自定义输出<br> 注意到源码BasicConfigurator里有<code>layout.setPattern(&quot;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot;)</code><br> 看到pattern不难猜想出这个就是我们输出的格式</p><blockquote><p>17:37:38.502 [main] INFO cn.ikarosx.Demo - cn.ikarosx.demo info %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 和我们这个一对比就很相似</p></blockquote><p>如果内置的一些Appender不符合要求，可以<a href="#">自定义</a>，比如可以直接将日志发送给<code>loki</code>而不经过<code>promtail</code></p><p>另外如果logback发生了错误，他会自动打印到console上，比如<a href="#error">上面</a>没有获取到指定配置文件的时候</p><h2 id="引用文章" tabindex="-1"><a class="header-anchor" href="#引用文章" aria-hidden="true">#</a> 引用文章</h2><ol><li>官网 https://logback.qos.ch/manual/introduction.html</li></ol>`,18);function m(v,g){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("现在常见的java日志是用log4j/logback打印，而其实两者是同一个作者"),n("a",k,[s("ceki"),c(a)]),r,s(" 先来一个简单的demo")]),d])}const f=t(i,[["render",m],["__file","0721_logback.html.vue"]]);export{f as default};
