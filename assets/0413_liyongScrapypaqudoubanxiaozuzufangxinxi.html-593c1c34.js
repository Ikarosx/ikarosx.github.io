import{_ as t,n as o,p as i,q as c,s as e,R as n,t as a,Y as s}from"./framework-f2b64c38.js";const h={},l=s('<h1 id="利用scrapy爬取豆瓣小组租房信息" tabindex="-1"><a class="header-anchor" href="#利用scrapy爬取豆瓣小组租房信息" aria-hidden="true">#</a> 利用Scrapy爬取豆瓣小组租房信息</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>最近要换房子，于是在逛豆瓣租房，由于租房信息错综复杂（中介较多），于是想能不能利用爬虫将数据抓取下来再通过某种方式进行数据清洗/过滤，达到可以自定义筛选和排除中介的目的。</p><h2 id="成果" tabindex="-1"><a class="header-anchor" href="#成果" aria-hidden="true">#</a> 成果</h2>',4),p={href:"https://github.com/Ikarosx/douban_rent_house",target:"_blank",rel:"noopener noreferrer"},d=s('<p>Scrapy爬取数据，Flutter写前端，SpringBoot写后端</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo1681314935038.png"><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230412235646.png"><h2 id="爬虫部分" tabindex="-1"><a class="header-anchor" href="#爬虫部分" aria-hidden="true">#</a> 爬虫部分</h2><p>本文侧重讲爬虫部分，即原始数据的采集<br> 数据来源于豆瓣小组租房</p><h3 id="爬取思路" tabindex="-1"><a class="header-anchor" href="#爬取思路" aria-hidden="true">#</a> 爬取思路</h3><p>找到一个小组讨论贴的第一页<br> 循环爬取下一页<br> 直到爬取到指定时间结束为止（通过判断每一页的最后一条的时间）</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230413092328.png"><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230413092505.png"><h3 id="爬取实现" tabindex="-1"><a class="header-anchor" href="#爬取实现" aria-hidden="true">#</a> 爬取实现</h3><p>思路有了，实现方法大同小异，取决于自己熟悉什么。 我采取的是Scrapy，自己手写request也可以的<br> 由于github已经有源码了，我就省略一些<br> 主要讲讲遇到的一些问题和思路</p><h4 id="主体爬取" tabindex="-1"><a class="header-anchor" href="#主体爬取" aria-hidden="true">#</a> 主体爬取</h4>',12),u={href:"https://www.douban.com/group/futianzufang/discussion?start=0&type=new",target:"_blank",rel:"noopener noreferrer"},_=e("br",null,null,-1),b=e("br",null,null,-1),g=e("br",null,null,-1),f=s('<img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230413093134.png"><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230413093522.png"><p>拿到数据以后可以存储到数据库<br> 这里我是通过Scrapy的PipLine实现的，其他的可以写sql插入，类似</p><h4 id="反爬" tabindex="-1"><a class="header-anchor" href="#反爬" aria-hidden="true">#</a> 反爬</h4><p>正常爬虫绕不开的就是反爬<br> 这里有几个方面可以处理</p><ol><li>cookie，使用随机11位bid，这里是根据网上资料的结论处理的</li></ol><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230413093910.png"><ol start="2"><li>随机UA头</li><li>异常重试等机制，针对403和302进行处理</li><li>Socks5代理</li></ol>',8),m=e("br",null,null,-1),x=e("br",null,null,-1),k=e("br",null,null,-1),y={href:"https://www.xiequ.cn/index.html?d325395f",target:"_blank",rel:"noopener noreferrer"},z=e("img",{src:"https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo20230412233737.png"},null,-1),S=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1),w={href:"https://github.com/Ikarosx/douban_rent_house",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,[n("爬虫首先要应对的就是反爬，但要注意有风险，还是要降低一些频率"),e("br"),n(" 多搜索，网上基本上都有现成的思路或者代码"),e("br"),n(" 除了爬虫部分还写了flutter和后端"),e("br"),n(" flutter就是一个demo"),e("br"),n(" 后端做的比较简单，就是一些筛选和过滤"),e("br"),n(" 过滤规则比较随意（比如超过10个图片判定为中介）")],-1);function B(I,N){const r=o("ExternalLinkIcon");return i(),c("div",null,[l,e("p",null,[e("a",p,[n("跳转github查看源码"),a(r)])]),d,e("p",null,[n("如思路所言，设定起始页为"),e("a",u,[n("小组讨论帖的第一页"),a(r)]),_,n(" 提取每一行的数据，并判断结束时间，递归下一页继续爬取"),b,n(" 注意从这个页面上能获取到的数据不包括帖子的详情，所以在提取每一行数据的时候"),g,n(" 如果需要详情，还需要再额外请求这个帖子的地址，再从新页面拿到帖子的内容")]),f,e("p",null,[n("这一点是比较重要的"),m,n(" 如果不加代理爬取，很快就会触发403和302"),x,n(" 而且加的必须是Socks5代理，http代理不行（暂不知为啥，可能是防火墙有关系把）"),k,n(" 我采用的代理是"),e("a",y,[n("携趣代理"),a(r)]),n("，不充钱每天也有免费1000个ip，充钱也足够便宜")]),z,S,e("p",null,[e("a",w,[n("跳转github查看源码"),a(r)])]),q])}const v=t(h,[["render",B],["__file","0413_liyongScrapypaqudoubanxiaozuzufangxinxi.html.vue"]]);export{v as default};
