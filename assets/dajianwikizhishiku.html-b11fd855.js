import{_ as i,n as r,p as o,q as l,s as a,R as e,t as s,Y as t}from"./framework-f2b64c38.js";const c={},p=a("h2",{id:"环境准备",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#环境准备","aria-hidden":"true"},"#"),e(" 环境准备")],-1),d=a("p",null,[e("基于LAMP，为了开发方便"),a("br"),e(" 采用docker部署环境")],-1),h=a("h3",{id:"安装docker",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#安装docker","aria-hidden":"true"},"#"),e(" 安装docker")],-1),m={href:"https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/docker_install_Ikarosx.sh",target:"_blank",rel:"noopener noreferrer"},u=t(`<div class="custom-container danger"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M10 10l4 4m0-4l-4 4"></path></g></svg><p class="custom-container-title">docker_install_Ikarosx.sh</p><p>本脚本仅适用于CentOS使用<br> 另外里面有一个初始化服务器的选项<br> 包括了</p><ol><li>关闭SELINUX</li><li>更换yum源为阿里云<br><strong>请注意有需要才使用</strong></li></ol></div><h3 id="获取镜像" tabindex="-1"><a class="header-anchor" href="#获取镜像" aria-hidden="true">#</a> 获取镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜索lamp相关镜像，--filter=stars=10表示过滤出stars&gt;=10的镜像    </span>
<span class="token function">docker</span> search <span class="token parameter variable">--filter</span><span class="token operator">=</span>stars<span class="token operator">=</span><span class="token number">10</span> lamp    
<span class="token comment"># 从下面图片可以看到哪个是收藏数最多的，把它pull下来    </span>
<span class="token function">docker</span> pull mattrayner/lamp    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805222221.png">`,4),k={href:"https://hub.docker.com/r/mattrayner/lamp",target:"_blank",rel:"noopener noreferrer"},v=t(`<details class="custom-container details"><summary class="custom-container-title">mattrayner/lamp说明</summary><p>Using the image</p><h1 id="on-the-command-line" tabindex="-1"><a class="header-anchor" href="#on-the-command-line" aria-hidden="true">#</a> On the command line</h1><p>This is the quickest way</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Launch a 18.04 based image        </span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token string">&quot;80:80&quot;</span> <span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/app:/app mattrayner/lamp:latest-1804    
    
<span class="token comment"># Launch a 16.04 based image    </span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token string">&quot;80:80&quot;</span> <span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/app:/app mattrayner/lamp:latest-1604    
    
<span class="token comment"># Launch a 14.04 based image    </span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token string">&quot;80:80&quot;</span> <span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/app:/app mattrayner/lamp:latest-1404  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="with-a-dockerfile" tabindex="-1"><a class="header-anchor" href="#with-a-dockerfile" aria-hidden="true">#</a> With a Dockerfile</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM mattrayner/lamp:latest-1804    
    
<span class="token comment"># Your custom commands    </span>
    
CMD <span class="token punctuation">[</span><span class="token string">&quot;/run.sh&quot;</span><span class="token punctuation">]</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="mysql-databases" tabindex="-1"><a class="header-anchor" href="#mysql-databases" aria-hidden="true">#</a> MySQL Databases</h1><p>By default, the image comes with a root MySQL account that has no password. This account is only available locally, i.e. within your application. It is not available from outside your docker image or through phpMyAdmin.</p><p>When you first run the image you&#39;ll see a message showing your admin user&#39;s password. This user can be used locally and externally, either by connecting to your MySQL port (default 3306) and using a tool like MySQL Workbench or Sequel Pro, or through phpMyAdmin.</p><p>If you need this login later, you can run docker logs CONTAINER_ID and you should see it at the top of the log.</p><h2 id="creating-a-database" tabindex="-1"><a class="header-anchor" href="#creating-a-database" aria-hidden="true">#</a> Creating a database</h2><p>So your application needs a database - you have two options...</p><ol><li>PHPMyAdmin</li><li>Command line</li></ol><h3 id="phpmyadmin" tabindex="-1"><a class="header-anchor" href="#phpmyadmin" aria-hidden="true">#</a> PHPMyAdmin</h3><p>Docker-LAMP comes pre-installed with phpMyAdmin available from http://DOCKER_ADDRESS/phpmyadmin.</p><p><strong>NOTE</strong>: you cannot use the root user with PHPMyAdmin. We recommend logging in with the admin user mentioned in the introduction to this section.</p><h3 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line" aria-hidden="true">#</a> Command Line</h3><p>First, get the ID of your running container with docker ps, then run the below command replacing CONTAINER_ID and DATABASE_NAME with your required values:</p><p><code>docker exec CONTAINER_ID mysql -uroot -e &quot;create database DATABASE_NAME&quot;</code></p><h1 id="adding-your-own-content" tabindex="-1"><a class="header-anchor" href="#adding-your-own-content" aria-hidden="true">#</a> Adding your own content</h1><p>The &#39;easiest&#39; way to add your own content to the lamp image is using Docker volumes. This will effectively &#39;sync&#39; a particular folder on your machine with that on the docker container.</p><p>The below examples assume the following project layout and that you are running the commands from the &#39;project root&#39;.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/ (project root)    
/app/ (your PHP files live here)    
/mysql/ (docker will create this and store your MySQL data here) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In english, your project should contain a folder called app containing all of your app&#39;s code. That&#39;s pretty much it.</p><h2 id="adding-your-app" tabindex="-1"><a class="header-anchor" href="#adding-your-app" aria-hidden="true">#</a> Adding your app</h2><p>The below command will run the docker image mattrayner/lamp:latest interactively, exposing port 80 on the host machine with port 80 on the docker container. It will then create a volume linking the app/ directory within your project to the /app directory on the container. This is where Apache is expecting your PHP to live.</p><p><code>docker run -i -t -p &quot;80:80&quot; -v \${PWD}/app:/app mattrayner/lamp:latest</code></p><h2 id="persisting-your-mysql" tabindex="-1"><a class="header-anchor" href="#persisting-your-mysql" aria-hidden="true">#</a> Persisting your MySQL</h2><p>The below command will run the docker image mattrayner/lamp:latest, creating a mysql/ folder within your project. This folder will be linked to /var/lib/mysql where all of the MySQL files from container lives. You will now be able to stop/start the container and keep your database changes.</p><p>You may also add -p 3306:3306 after -p 80:80 to expose the mysql sockets on your host machine. This will allow you to connect an external application such as SequelPro or MySQL Workbench.</p><p><code>docker run -i -t -p &quot;80:80&quot; -v \${PWD}/mysql:/var/lib/mysql mattrayner/lamp:latest</code></p><h2 id="doing-both" tabindex="-1"><a class="header-anchor" href="#doing-both" aria-hidden="true">#</a> Doing both</h2><p>The below command is our &#39;recommended&#39; solution. It both adds your own PHP and persists database files. We have created a more advanced alias in our .bash_profile files to enable the short commands ldi and launchdocker. See the next section for an example.</p><p><code>docker run -i -t -p &quot;80:80&quot; -v \${PWD}/app:/app -v \${PWD}/mysql:/var/lib/mysql mattrayner/lamp:latest</code></p></details><blockquote><p>可以得知以下信息</p><ol><li>mysql root默认无密码，但只能本地使用</li><li>在第一次运行镜像的时候可以看到生成的mysql账号admin的密码</li><li>如果密码忘了可以通过查看docker日志docker logs lamp</li><li>PHPAdmin访问地址http://DOCKER_ADDRESS/phpmyadmin</li><li>创建容器可以使用根据自己的要求，持久化mysql/php</li><li>如果要添加自己的应用，放在根目录下的app即可</li></ol></blockquote><h3 id="使用镜像" tabindex="-1"><a class="header-anchor" href="#使用镜像" aria-hidden="true">#</a> 使用镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行容器 -p映射端口，-v映射数据卷，--name指定名字为lamp，-d守护模式运行</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> <span class="token variable">\${<span class="token environment constant">PWD</span>}</span>/app:/app <span class="token parameter variable">--name</span> lamp <span class="token parameter variable">-d</span> mattrayner/lamp
<span class="token comment"># 查看容器日志，寻找mysql密码</span>
<span class="token function">docker</span> logs lamp <span class="token operator">|</span> <span class="token function">grep</span> connect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805230224.png"><p>现在就可以访问你的phpadmin了<br> http://DOCKER_ADDRESS/phpmyadmin<br> 账号为admin，密码为你刚才从docker日志查看到的<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805230547.png"></p><h2 id="安装mediawiki" tabindex="-1"><a class="header-anchor" href="#安装mediawiki" aria-hidden="true">#</a> 安装MediaWiki</h2>`,7),b={href:"https://releases.wikimedia.org/mediawiki/1.29/mediawiki-1.29.1.tar.gz",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载文件到你刚才映射的app文件夹</span>
<span class="token function">wget</span> https://releases.wikimedia.org/mediawiki/1.29/mediawiki-1.29.1.tar.gz <span class="token parameter variable">-O</span> ~/app/mediawiki-1.29.1.tar.gz
<span class="token comment"># 解压</span>
<span class="token function">tar</span> xf mediawiki-1.29.1.tar.gz 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在就可以访问你的wiki了 <img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805231115.png"> 当然还需要配置</p><ol><li>点击set-up</li><li>继续继续继续</li><li>直到输入数据库那里填一下账号密码</li><li>继续继续继续</li></ol><p>最后出现了下载LocalSettings.php<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805231358.png"></p><p>我们利用scp/其他工具上传到服务器上,将其放置在<strong>app/mediawiki-1.29.1</strong>文件夹下<br> 然后点击<strong>进入您的wiki</strong><br> 然后就能看到首页了<br><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805231746.png"></p><p>右上角可以登录<br> 然后点击页面可以编辑<br> 访问一个新的词条可以创建词条</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">app</p><p>这是我第二次搭建了<br> 我第一次搭建的时候没认真看文档<br> 直接把项目放在了/var/www/里<br> 这次看文档很好奇为什么放在/app里也可以<br> 然后ll一看发现其实是用了软链接</p></div><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20200805223830.png"><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">DockerFile</p><p>我们可以使用docker history 来查看DockerFile<br><code>docker history --no-trunc mattrayner/lamp</code></p></div>`,10);function y(w,f){const n=r("ExternalLinkIcon");return o(),l("div",null,[p,d,h,a("p",null,[e("这是我编写的安装"),a("a",m,[e("docker脚本"),s(n)]),e(",大家可以使用/参考")]),u,a("p",null,[e("查看"),a("a",k,[e("mattrayner/lamp说明"),s(n)])]),v,a("p",null,[a("a",b,[e("下载"),s(n)])]),g])}const _=i(c,[["render",y],["__file","dajianwikizhishiku.html.vue"]]);export{_ as default};
