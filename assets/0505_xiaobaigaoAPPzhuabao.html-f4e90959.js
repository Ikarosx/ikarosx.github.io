import{_ as o,n as h,p as t,q as i,s as e,R as a,t as s,Y as r}from"./framework-f2b64c38.js";const d={},p=r('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>目前抓包主要都是服务于爬虫，之前做的爬虫都是针对网页的，所以研究过网页的http包研究，这部分其实基本上看看浏览器发出去的请求就好了，不用刻意抓包（或者说浏览器帮我们做了）。但是app不一样，app要看到请求怎么发出去，并模拟，就涉及到抓包，有必要还需要逆向等等（当然web有时候也需要）。</p><h2 id="app抓包" tabindex="-1"><a class="header-anchor" href="#app抓包" aria-hidden="true">#</a> APP抓包</h2><p>APP和浏览器抓包最大的不同是，浏览器的请求可以通过F12看到，APP的请求是没办法直接看到，所以需要抓包工具来查看，本文使用<strong>Charles</strong><br> Charles是一款收费的抓包工具，但是可以免费试用，试用期间可以使用所有功能，只是会有弹窗提示，可以忽略。</p><h3 id="charles" tabindex="-1"><a class="header-anchor" href="#charles" aria-hidden="true">#</a> Charles</h3>',5),c={href:"https://www.charlesproxy.com/",target:"_blank",rel:"noopener noreferrer"},l=r('<p>Charles可以监听某一个端口的流量，我们要做的就是让手机的流量通过代理走Charles监听的端口，默认端口是8888，Charles会将请求显示出来，这样就可以看到请求的内容了</p><h4 id="关闭windows-proxy" tabindex="-1"><a class="header-anchor" href="#关闭windows-proxy" aria-hidden="true">#</a> 关闭windows proxy</h4><p>在 <code>Proxy -&gt; windows proxy(ctrl + shift + p)</code> 取消勾选<br> 勾上的话会监听windows的流量，不方便查看手机APP的流量</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202305112032126.png"><h4 id="设置手机代理" tabindex="-1"><a class="header-anchor" href="#设置手机代理" aria-hidden="true">#</a> 设置手机代理</h4><p>手机连接wifi后，设置代理为手动，输入电脑的ip和端口8888，这样手机的流量就会通过Charles了<br> 如何查看电脑ip？ 在命令行中输入<code>ipconfig</code>，查看ip地址</p><h4 id="手机安装证书" tabindex="-1"><a class="header-anchor" href="#手机安装证书" aria-hidden="true">#</a> 手机安装证书</h4><p>手机连接wifi后，浏览器输入<code>chls.pro/ssl</code>，下载证书，安装证书，安装完成后，手机的流量就可以被Charles解析了</p><p>如何安装？<br> 下载完毕找到证书，点击安装，安装完成后，可能需要在手机的设置中信任证书，不同手机的设置位置不一样，可以百度一下</p><h3 id="运行app" tabindex="-1"><a class="header-anchor" href="#运行app" aria-hidden="true">#</a> 运行APP</h3><p>设置完代理后，打开APP，在Charles中就可以看到请求了<br> 如果是第一次运行可能弹窗是否允许，选择允许</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202305112034781.png"><p>然后就应该可以看到请求的内容了</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/picgo202305112049914.png"><p>但是很大概率你会看到unknown<br> 这主要是因为存在证书校验<br> 可能是客户端校验/服务端校验/双向校验<br> 导致服务端不接受这个https的请求<br> 关于双向证书认证：客户端有自己的密匙，并持有服务端的证书，服务端给客户端发送数据时，需要将服务端的证书发给客户端验证，验证通过才运行发送数据，同样，客户端请求服务器数据时，也需要将自己的证书发给服务端验证，通过才允许执行请求。<br> 详细的内容可以参考https://blog.csdn.net/enweitech/article/details/53813183。</p><h3 id="突破限制" tabindex="-1"><a class="header-anchor" href="#突破限制" aria-hidden="true">#</a> 突破限制</h3>',16),u={href:"https://magiskcn.com/",target:"_blank",rel:"noopener noreferrer"},b=e("br",null,null,-1),_=e("br",null,null,-1),f=e("br",null,null,-1),x=e("br",null,null,-1),g=r('<h4 id="drony" tabindex="-1"><a class="header-anchor" href="#drony" aria-hidden="true">#</a> Drony</h4><p>有些时候还会出现点了请求但是根本连包都没看到，也没看到报错<br> 那是因为有些请求不经过系统的代理，所以这里采用Drony实现类似vpn的形式，接管所有的流量，这样就可以看到请求了</p><h3 id="抓包" tabindex="-1"><a class="header-anchor" href="#抓包" aria-hidden="true">#</a> 抓包</h3><p>经过上面的步骤，大概率是可以看到请求的内容了， 但对于一些出名的app来说，大概率还是出现网络异常，那就是有服务端校验了<br> 需要逆向debug处理</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>抓包是为了看到请求的地址，参数，Headers方便我们去模拟请求<br> 但是很多app都是做了加密处理的，这个需要逆向app，复杂一些涉及到so的处理<br> 真非常人所能及，因此目前爬虫技术仅接触到表层，做一些简单的爬虫，复杂的还是交给专业的人去做吧</p>',6);function m(P,w){const n=h("ExternalLinkIcon");return t(),i("div",null,[p,e("p",null,[e("a",c,[a("官网下载"),s(n)])]),l,e("p",null,[a("这里采用Magisk + LSPosed + Drony + TrustMeAlready的方式来突破限制 Magisk是一款root工具，可以用来root手机，安装方式其实还有些复杂，可以参考"),e("a",u,[a("官网"),s(n)]),b,a(" 有了magisk后安装LSPosed框架，在框架上安装一些模块，比如TrustMeAlready来帮助我们屏蔽掉客户端校验，这样就可以看到请求的内容了"),_,a(" 原理是app会在客户端内内置服务端的证书，然后在收到服务端请求的时候会校验这个证书和发来的是否一致，如果不是不一致，就会拒绝请求"),f,a(" 而TrustMeAlready就是通过hook帮我们屏蔽掉这个校验，让app认为我们的证书是合法的，这样就可以看到请求的内容了"),x,a(" 这里有个问题，如果是服务端校验了客户端的证书，那我们就得拿到客户端的证书以及密钥，这个需要逆向app，并通过调试断点等方法去拿到密钥，这里我也没有实践成功过，暂时mark")]),g])}const k=o(d,[["render",m],["__file","0505_xiaobaigaoAPPzhuabao.html.vue"]]);export{k as default};
