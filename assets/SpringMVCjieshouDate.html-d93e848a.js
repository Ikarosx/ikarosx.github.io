import{_ as e,n as p,p as o,q as c,s,R as n,t as l,Y as a}from"./framework-f2b64c38.js";const i={},r=a('<h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h2><p>在项目中会经常遇见需要接收Date类型的数据<br> 然后就会遇到因为格式不对接收不了的问题</p><h2 id="接收" tabindex="-1"><a class="header-anchor" href="#接收" aria-hidden="true">#</a> 接收</h2><p>接收参数上写上<br><code>@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</code> pattern可以根据自己需求修改</p><p>值得一提的是yyyy与YYYY有些区别<br> Y是week year，会导致计算出错<br> 而H代表24H制<br> h代表12H制<br> 更多可以参考<strong>SimpleDateFormat类</strong>的说明</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">@RequestBody接收@DateTimeFormat不生效</p><p>因为@RequestBody接收参数会采用<strong>HttpMessageConverter</strong><br> 见下文<code>@RequestBody参数处理</code></p></div><h2 id="datetimeformat原理" tabindex="-1"><a class="header-anchor" href="#datetimeformat原理" aria-hidden="true">#</a> @DateTimeFormat原理</h2>',7),u=s("br",null,null,-1),k=s("br",null,null,-1),d=s("br",null,null,-1),m={href:"https://www.jianshu.com/p/0e4dd9494384?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>我的主要关注点是在于加了@DateTimeFormat和没加的处理逻辑<br> 经过教程指点<br> 在<code>org.springframework.beans.AbstractNestablePropertyAccessor#convertForProperty</code><br> 发现获取到的td不同</p><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201010150331.png"><img src="https://ikaros-picture.oss-cn-shenzhen.aliyuncs.com/typora/Ikaros/20201010150500.png"><p>这大概就是菜鸡与大佬的区别吧。。</p><h2 id="requestbody参数处理" tabindex="-1"><a class="header-anchor" href="#requestbody参数处理" aria-hidden="true">#</a> @RequestBody参数处理</h2><p>我发现当我使用**@RequestBody<strong>注解接收json参数时<br> 并不会走上面提到的方法<br> 查了一下得知SpringMVC会使用</strong>HandlerAdapter<strong>配置的</strong>HttpMessageConverters<strong>来解析json或者xml数据<br> @DateTimeFormat对于json/xml数据</strong>不生效**<br> 默认解析json的Converter是<br><code>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</code><br> 所以我们需要配置Jackson让其能够正确解析Date类型</p><ul><li>每个字段@JsonFormat(pattern=&quot;yyyy-MM-dd&quot;,timezone = &quot;GMT+8&quot;)</li><li>SpringBoot可以全局配置application.yaml，<code>jackson.date-format=yyyy-MM-dd HH:mm:ss jackson.time-zone=GMT+8</code></li><li>SSM配置一个String转Date的转化器并注册</li></ul><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">序列化与反序列化都可用</p><p>配置之后不管是接收还是返回json串都生效</p></div><h3 id="转化器" tabindex="-1"><a class="header-anchor" href="#转化器" aria-hidden="true">#</a> 转化器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编写转化器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Date</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                target <span class="token operator">=</span>  format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;parser %s to Date fail&quot;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">annotation-config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDateConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 注册转换器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDateConverter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.format.support.FormattingConversionServiceFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>converters<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xx.xx.xx.StringToDateConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.core.convert.support.StringToBooleanConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我现在还是只会使用但不知道为什么的那种类型<br> 实在是佩服写出这些框架的人。。<br> 希望一点点进步<br> 希望一点点努力</p>`,13);function g(h,b){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("我们都知道SpringMVC会帮我们自动处理参数"),u,n(" 其原理是通过一系列的Handler和Adapter实现的"),k,n(" 由于我对SpringMVC的源码也不了解"),d,n(" 只能通过查询"),s("a",m,[n("教程"),l(t)]),n("了解大概")]),v])}const w=e(i,[["render",g],["__file","SpringMVCjieshouDate.html.vue"]]);export{w as default};
